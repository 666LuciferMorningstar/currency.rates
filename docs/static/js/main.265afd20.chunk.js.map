{"version":3,"sources":["components/home.js","components/intro.js","components/graph.js","components/plot.js","components/download.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","className","delay","to","React","Component","IntroPage","Graph","chartRef","createRef","myChartRef","this","current","getContext","Chart","defaults","global","elements","line","tension","type","data","labels","datasets","label","fill","rate","gbp","usd","aud","nok","eur","options","responsive","id","ref","PlotPage","href","DownlaodPage","App","atEnter","opacity","atLeave","atActive","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.265afd20.chunk.js","sourcesContent":["import React from 'react'\r\nimport './home.css'\r\nimport FadeIn from 'react-fade-in'\r\n/*TODO: create react loading spinner */\r\n/*TODO: make redirect without reloading after clicking button */\r\n/*in footer should be icons like github, author, bitbucket */\r\nimport {Link} from 'react-router-dom'\r\n\r\nclass HomePage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <main className='homeContainer'>\r\n                <FadeIn delay='500'>\r\n                    <div className='helloText'>Wanna start investing in currency?</div>\r\n                    <div className='centre'>\r\n                        <Link to='/intro'><button className='startBtn'>Let's Go!</button></Link>\r\n                    </div>\r\n                </FadeIn>\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HomePage","import React from 'react'\r\nimport './intro.css'\r\nimport {Link} from 'react-router-dom'\r\nimport FadeIn from 'react-fade-in'\r\n\r\nexport default class IntroPage extends React.Component {\r\n    render() {\r\n        return (\r\n            <main className='introContainer'>\r\n                <FadeIn delay='500'>\r\n                <div className='introText'>\r\n                    In a moment you'll see graph, which depicts currency rates in PLN for:<br/>\r\n                    GBP, USD, AUD, EUR, NOK.\r\n                    <br/><br/>\r\n                    Remember though, this 'game' is risky. Invest wisely!  \r\n                </div>\r\n                <Link to='/plot'><button className='startBtn readyBtn'>Ready?</button></Link>\r\n                </FadeIn>\r\n            </main>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport Chart from 'chart.js'\r\nimport './graph.css'\r\n\r\nexport default class Graph extends React.Component {\r\n    chartRef = React.createRef()\r\n\r\n\r\n    componentDidMount() {\r\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\r\n        Chart.defaults.global.elements.line.tension = 0;\r\n        //getData() ////////////////////////////////\r\n        new Chart(myChartRef, {\r\n            type: \"line\",\r\n            data: {\r\n                labels: getPeriod(),\r\n                datasets: [\r\n                    { label: \"GBP\", fill: false, data: rate.gbp },\r\n                    { label: 'USD', fill: false, data: rate.usd },\r\n                    { label: 'AUD', fill: false, data: rate.aud },\r\n                    { label: 'NOK', fill: false, data: rate.nok },\r\n                    { label: 'EUR', fill: false, data: rate.eur }\r\n                ]\r\n            },\r\n            options: {\r\n                responsive: true,\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className='graphContainer'>\r\n           <canvas\r\n                id=\"myChart\"\r\n                ref={this.chartRef}\r\n            ></canvas>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction getPeriod() {\r\n    return [\"01.06\", \"02.06\", \"03.06\", '04.06', '05.06', '06.06', '07.06']\r\n}\r\n\r\n\r\n//let data = []\r\nlet rate = {\r\n    usd: [4.15, 4.17, 4.1658, 4.19, 4.21, 4.15999, 4.18],\r\n    aud: [3.27, 3.26, 3.2658, 3.29, 3.30, 3.29555, 3.1567],\r\n    nok: [0.41, 0.40, 0.4159, 0.42, 0.39, 0.40, 0.41559],\r\n    eur: [4.39, 4.50, 4.3950, 4.38, 4.389, 4.40, 4.41],\r\n    gbp: [5.03, 5.04, 4.99, 5.01, 5.08934, 5.06, 5.00]\r\n}\r\n\r\n\r\n// function getData() {\r\n//     const currTypes = ['usd', 'aud', 'nok', 'eur', 'gbp']\r\n//     let newRates = {}\r\n//     for(const currType of currTypes) {\r\n//         apiReq(currType)\r\n//         data.forEach(element => {\r\n//             newRates[currType].push(element.mid)\r\n//         });\r\n//     }\r\n//     rate = newRates\r\n// }\r\n\r\n// function apiReq(currType) {\r\n//     fetch(`https://api.nbp.pl/api/exchangerates/rates/a/${currType}/2020-06-01/2020-06-07/?format=json`)\r\n//     .then(res => res.json())\r\n//     .then(json => data = json.rates);\r\n// }\r\n\r\n// async function apiReq() {\r\n//     let data\r\n//     res = await fetch(`https://api.nbp.pl/api/exchangerates/rates/a/usd/2020-06-01/2020-06-07/?format=json`)\r\n//     return res.json().rates\r\n// }\r\n// let cos = apiReq()\r\n\r\n\r\n// let data\r\n//     fetch(`https://api.nbp.pl/api/exchangerates/rates/a/usd/2020-06-01/2020-06-07/?format=json`)\r\n//     .then(res => res.json())\r\n//     .then(json => data = json.rates);","import React from 'react'\r\nimport FadeIn from 'react-fade-in'\r\nimport {Link} from 'react-router-dom'\r\nimport Graph from './graph'\r\n\r\nimport './plot.css'\r\n\r\nexport default class PlotPage extends React.Component {\r\n    render() {\r\n        return (\r\n            <FadeIn delay='500'>\r\n            <main className='plotContainer'>\r\n                <Graph />\r\n            </main>\r\n            <div className='btns'>\r\n                <Link to='/download'><button className='ddBtns'>Download</button></Link>\r\n                <a href='https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=9KKWSY36RAKLL&source=url'>\r\n                    <button className='ddBtns'>Donate</button>\r\n                </a>\r\n            </div>\r\n\r\n            </FadeIn>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport FadeIn from 'react-fade-in'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default class DownlaodPage extends React.Component {\r\n    render() {\r\n        return(\r\n            <FadeIn delay='500'>\r\n                <div>Currently Unavailable</div>\r\n                <Link to='/plot'><button className='startBtn'>Go back</button></Link>\r\n            </FadeIn>\r\n        )\r\n    }\r\n}","import React from 'react';\n\nimport HomePage from './components/home'\nimport IntroPage from './components/intro'\nimport PlotPage from './components/plot'\nimport DownloadPage from './components/download'\n\nimport {\n  BrowserRouter as Router,\n  //Switch,\n  Route\n} from \"react-router-dom\";\nimport { AnimatedSwitch } from 'react-router-transition';\n\nfunction App() {\n  return (\n    <Router>\n    <AnimatedSwitch atEnter={{ opacity: 0 }} atLeave={{ opacity: 0 }} atActive={{ opacity: 1 }} className=\"switch-wrapper\">\n      <Route exact path='/'>\n           <HomePage />\n         </Route>\n         <Route path='/intro'>\n           <IntroPage />\n         </Route>\n         <Route path='/plot'>\n           <PlotPage />\n         </Route>\n         <Route path='/download'>\n            <DownloadPage />\n         </Route>\n    </AnimatedSwitch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}